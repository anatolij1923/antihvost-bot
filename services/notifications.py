from datetime import datetime, timedelta
import asyncio
from database.database import Database
from aiogram import Bot

class NotificationManager:
    def __init__(self, db: Database, bot: Bot):
        self.db = db
        self.bot = bot
        self.notification_intervals = [7, 3, 1]  # –¥–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def check_deadlines(self):
        print("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        while True:
            try:
                current_date = datetime.now()
                print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {current_date.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                self.db.cursor.execute('SELECT user_id FROM users WHERE is_authorized = TRUE AND notifications_enabled = TRUE')
                authorized_users = self.db.cursor.fetchall()
                print(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {len(authorized_users)}")
                
                for user in authorized_users:
                    user_id = user[0]
                    # print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    for days in self.notification_intervals:
                        target_date = current_date + timedelta(days=days)
                        # print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –Ω–∞ {target_date.strftime('%Y-%m-%d')} (—á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π)")
                        
                        tasks = await self.db.get_tasks_by_date(target_date, user_id)
                        # print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                        
                        for task in tasks:
                            task_id = task[0]
                            task_title = task[1]
                            task_type = task[2]
                            subject = task[3]
                            deadline = task[4]
                            priority = task[6]
                            
                            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ: {task_title}")
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                            emoji = "üìù"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            if task_type == "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è":
                                emoji = "üî¨"
                            elif task_type == "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ":
                                emoji = "üìö"
                            elif task_type == "üìä –ü—Ä–æ–µ–∫—Ç":
                                emoji = "üìä"
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                            priority_emoji = "‚ö™"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            if priority == "üî¥ –í—ã—Å–æ–∫–∏–π":
                                priority_emoji = "üî¥"
                            elif priority == "üü° –°—Ä–µ–¥–Ω–∏–π":
                                priority_emoji = "üü°"
                            elif priority == "üü¢ –ù–∏–∑–∫–∏–π":
                                priority_emoji = "üü¢"
                            
                            message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n" \
                                    f"{emoji} {task_type}\n" \
                                    f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n" \
                                    f"üìå –ó–∞–¥–∞—á–∞: {task_title}\n" \
                                    f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n" \
                                    f"‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω–µ–π\n" \
                                    f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {deadline}"
                            
                            try:
                                await self.bot.send_message(user_id, message)
                                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(6 * 60 * 60)
                
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π 