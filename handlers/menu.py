from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.main_menu import main_menu_keyboard
from keyboards.lab_menu import get_assignments_menu_kb
from keyboards.events_menu import get_events_menu_kb
from utils.storage import get_authorized_user_name
from datetime import datetime

router = Router()

@router.message(F.text == "üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö")
async def handle_labs_view(message: Message):
    from handlers.assignments import assignments  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    
    labs = {k: v for k, v in assignments.items() if v.type == 'lab' and v.created_by == message.from_user.id}
    if not labs:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç!", reply_markup=main_menu_keyboard)
        return

    text = "üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç:\n\n"
    now = datetime.now()
    
    for lab in sorted(labs.values(), key=lambda x: x.deadline):
        time_left = lab.deadline - now
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if time_left.total_seconds() > 0 else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        
        text += (
            f"üî¨ {lab.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {lab.description}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {lab.deadline.strftime('%d.%m.%Y %H:%M')}\n"
        )
        if time_left.total_seconds() > 0:
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left}–¥ {hours_left}—á\n"
        text += "\n"

    await message.answer(text, reply_markup=main_menu_keyboard)

@router.message(F.text == "üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
async def handle_homework(message: Message):
    from handlers.assignments import assignments  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    
    homeworks = {k: v for k, v in assignments.items() if v.type == 'homework' and v.created_by == message.from_user.id}
    if not homeworks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!", reply_markup=main_menu_keyboard)
        return

    text = "üìñ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
    now = datetime.now()
    
    for hw in sorted(homeworks.values(), key=lambda x: x.deadline):
        time_left = hw.deadline - now
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if time_left.total_seconds() > 0 else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        
        text += (
            f"üìö {hw.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {hw.description}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {hw.deadline.strftime('%d.%m.%Y %H:%M')}\n"
        )
        if time_left.total_seconds() > 0:
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left}–¥ {hours_left}—á\n"
        text += "\n"

    await message.answer(text, reply_markup=main_menu_keyboard)

@router.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def handle_rating(message: Message):
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üèó", reply_markup=main_menu_keyboard)

@router.message(F.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏")
async def handle_management(message: Message):
    await message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏",
        reply_markup=get_assignments_menu_kb()
    )

@router.message(F.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def handle_events(message: Message):
    await message.answer(
        "–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
        reply_markup=get_events_menu_kb()
    )

@router.message(F.text == "–ù–µ –Ω–∞–∂–∏–º–∞—Ç—å‚ùó‚ùó‚ùó")
async def handle_danger_button(message: Message):
    name = get_authorized_user_name(message.from_user.id)
    await message.answer(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥ü•≥ü•≥. {name}, —Ç–µ–±–µ —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ \"–ù–µ –Ω–∞–∂–∏–º–∞—Ç—å\", "
        f"—Ç–µ–ø–µ—Ä—å –Ω–∞ —Ç–≤–æ–µ –∏–º—è –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ–± –æ—Ç—á–∏—Å–ª–µ–Ω–∏–∏ –†–µ–ø–∫–∏–Ω—É –î–º–∏—Ç—Ä–∏—é –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á—É",
        reply_markup=main_menu_keyboard
    )
