from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.main_menu import main_menu_keyboard
from keyboards.lab_menu import get_assignments_menu_kb, get_status_text, get_subject_name
from keyboards.events_menu import get_events_menu_kb
from database.db import get_user_fullname, get_user_assignments
from datetime import datetime
from utils.models import AssignmentStatus

router = Router()

@router.message(F.text == "üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö")
async def handle_labs_view(message: Message):
    assignments = get_user_assignments(message.from_user.id, 'lab')
    if not assignments:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç!", reply_markup=main_menu_keyboard)
        return

    text = "üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç:\n\n"
    now = datetime.now()
    
    for lab in sorted(assignments, key=lambda x: datetime.strptime(x[4], '%Y-%m-%d %H:%M:%S')):
        time_left = datetime.strptime(lab[4], '%Y-%m-%d %H:%M:%S') - now
        deadline_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if time_left.total_seconds() > 0 else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        
        try:
            status = AssignmentStatus(lab[5])
        except ValueError:
            status = AssignmentStatus.NOT_STARTED
            
        status_emoji = {
            AssignmentStatus.NOT_STARTED: "‚è≥",
            AssignmentStatus.IN_PROGRESS: "üîÑ",
            AssignmentStatus.COMPLETED: "‚úÖ",
            AssignmentStatus.SUBMITTED: "üì§"
        }[status]
        
        subject_text = f"–ü—Ä–µ–¥–º–µ—Ç: {get_subject_name(lab[7])}\n" if lab[7] else ""
        
        text += (
            f"üî¨ {lab[2]}\n"
            f"{subject_text}"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {lab[3]}\n"
            f"–°—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞: {deadline_status}\n"
            f"–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: {status_emoji} {get_status_text(status)}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {datetime.strptime(lab[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')}\n"
        )
        if time_left.total_seconds() > 0:
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left}–¥ {hours_left}—á\n"
        text += "\n"

    await message.answer(text, reply_markup=main_menu_keyboard)

@router.message(F.text == "üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
async def handle_homework(message: Message):
    assignments = get_user_assignments(message.from_user.id, 'homework')
    if not assignments:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!", reply_markup=main_menu_keyboard)
        return

    text = "üìñ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
    now = datetime.now()
    
    for hw in sorted(assignments, key=lambda x: datetime.strptime(x[4], '%Y-%m-%d %H:%M:%S')):
        time_left = datetime.strptime(hw[4], '%Y-%m-%d %H:%M:%S') - now
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if time_left.total_seconds() > 0 else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        
        text += (
            f"üìö {hw[2]}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {hw[3]}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {datetime.strptime(hw[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')}\n"
        )
        if time_left.total_seconds() > 0:
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left}–¥ {hours_left}—á\n"
        text += "\n"

    await message.answer(text, reply_markup=main_menu_keyboard)

@router.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def handle_rating(message: Message):
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üèó", reply_markup=main_menu_keyboard)

@router.message(F.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏")
async def handle_management(message: Message):
    await message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏",
        reply_markup=get_assignments_menu_kb()
    )

@router.message(F.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def handle_events(message: Message):
    await message.answer(
        "–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
        reply_markup=get_events_menu_kb()
    )

@router.message(F.text == "–ù–µ –Ω–∞–∂–∏–º–∞—Ç—å‚ùó‚ùó‚ùó")
async def handle_danger_button(message: Message):
    await message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –Ω–µ–µ.", reply_markup=main_menu_keyboard)
