from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.database import Database

router = Router()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")
        ],
        [
            InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–º–µ–Ω—é "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
def get_tasks_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")
        ],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="search_tasks")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def get_main_menu_reply_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ –∑–∞–¥–∞—á
def get_compact_tasks_keyboard(tasks: list) -> InlineKeyboardMarkup:
    keyboard = []
    for task in tasks:
        task_id, title, task_type, subject, deadline, description, priority, status = task
        keyboard.append([
            InlineKeyboardButton(
                text=f"{task_type} {title}",
                callback_data=f"task_detail:{task_id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–∏–¥
    keyboard.append([
        InlineKeyboardButton(
            text="üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤–∏–¥",
            callback_data="view_mode:detailed"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤–∏–¥–∞ –∑–∞–¥–∞—á
def get_detailed_tasks_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(
                text="üì± –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥",
                callback_data="view_mode:compact"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_main"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await message.answer(
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_reply_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /menu
@router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await message.answer(
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_reply_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@router.callback_query(lambda c: c.data == "my_tasks")
async def process_my_tasks(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ú–æ–∏ –∑–∞–¥–∞—á–∏:",
        reply_markup=get_tasks_menu_keyboard()
    )

@router.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(lambda c: c.data == "calendar")
async def process_calendar(callback: types.CallbackQuery):
    await callback.answer("–†–∞–∑–¥–µ–ª '–ö–∞–ª–µ–Ω–¥–∞—Ä—å' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.callback_query(lambda c: c.data == "rating")
async def process_rating(callback: types.CallbackQuery):
    await callback.answer("–†–∞–∑–¥–µ–ª '–†–µ–π—Ç–∏–Ω–≥' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.callback_query(lambda c: c.data == "settings")
async def process_settings(callback: types.CallbackQuery):
    await callback.answer("–†–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.callback_query(lambda c: c.data == "search_tasks")
async def process_search_tasks(callback: types.CallbackQuery):
    db = Database()
    tasks = await db.get_user_tasks(callback.from_user.id)
    
    if not tasks:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_tasks_menu_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    message_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_compact_tasks_keyboard(tasks)
    )

@router.callback_query(lambda c: c.data.startswith("view_mode:"))
async def process_view_mode(callback: types.CallbackQuery):
    db = Database()
    tasks = await db.get_user_tasks(callback.from_user.id)
    
    if not tasks:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_tasks_menu_keyboard()
        )
        return
    
    view_mode = callback.data.split(":")[1]
    
    if view_mode == "detailed":
        message_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        
        for task in tasks:
            task_id, title, task_type, subject, deadline, description, priority, status = task
            message_text += (
                f"üìå {title}\n"
                f"üìã –¢–∏–ø: {task_type}\n"
            )
            
            if task_type in ["üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "üè† –î–æ–º–∞—à–∫–∞"]:
                message_text += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject}\n"
                
            message_text += (
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_detailed_tasks_keyboard()
        )
    else:  # compact view
        message_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_compact_tasks_keyboard(tasks)
        )

@router.callback_query(lambda c: c.data.startswith("task_detail:"))
async def process_task_detail(callback: types.CallbackQuery):
    db = Database()
    task_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ
    try:
        db.cursor.execute('''
            SELECT id, title, task_type, subject, 
                   strftime('%d.%m.%Y %H:%M', deadline) as deadline,
                   description, priority, status
            FROM tasks
            WHERE id = ?
        ''', (task_id,))
        task = db.cursor.fetchone()
        
        if task:
            task_id, title, task_type, subject, deadline, description, priority, status = task
            message_text = (
                f"üìå {title}\n"
                f"üìã –¢–∏–ø: {task_type}\n"
            )
            
            if task_type in ["üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "üè† –î–æ–º–∞—à–∫–∞"]:
                message_text += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject}\n"
                
            message_text += (
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                        callback_data="view_mode:compact"
                    )
                ]
            ]
            
            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"Error getting task details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def process_main_menu_button(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    ) 