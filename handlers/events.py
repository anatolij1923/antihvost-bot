from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from datetime import datetime
import uuid

from states.event_states import EventStates
from keyboards.events_menu import get_events_menu_kb, get_event_actions_kb
from keyboards.main_menu import main_menu_keyboard
from utils.models import Event

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
events = {}

@router.callback_query(F.data == "event:add")
async def start_event_adding(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=None
    )
    await state.set_state(EventStates.entering_name)

@router.message(StateFilter(EventStates.entering_name))
async def process_event_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=None
    )
    await state.set_state(EventStates.entering_description)

@router.message(StateFilter(EventStates.entering_description))
async def process_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 15:00",
        reply_markup=None
    )
    await state.set_state(EventStates.entering_date)

@router.message(StateFilter(EventStates.entering_date))
async def process_event_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        
        event = Event(
            id=str(uuid.uuid4()),
            name=data["name"],
            description=data["description"],
            date=date,
            created_at=datetime.now(),
            created_by=message.from_user.id
        )
        
        events[event.id] = event
        
        await message.answer(
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_events_menu_kb()
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 15:00"
        )

@router.callback_query(F.data == "event:list")
async def list_events(callback: CallbackQuery):
    user_events = {k: v for k, v in events.items() if v.created_by == callback.from_user.id}
    
    if not user_events:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!",
            reply_markup=get_events_menu_kb()
        )
        return

    text = "üìÖ –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
    now = datetime.now()
    
    for event in sorted(user_events.values(), key=lambda x: x.date):
        time_left = event.date - now
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if time_left.total_seconds() > 0 else "‚ùå –ü—Ä–æ—à–ª–æ"
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        
        text += (
            f"üìå {event.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
        )
        if time_left.total_seconds() > 0:
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left}–¥ {hours_left}—á\n"
        text += "\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_events_menu_kb()
    )

@router.callback_query(F.data.startswith("event:delete:"))
async def delete_event(callback: CallbackQuery):
    event_id = callback.data.split(":")[2]
    if event_id in events and events[event_id].created_by == callback.from_user.id:
        del events[event_id]
        await callback.message.edit_text(
            "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=get_events_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ!",
            reply_markup=get_events_menu_kb()
        )

@router.callback_query(F.data == "event:back")
async def handle_back(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
        reply_markup=get_events_menu_kb()
    ) 