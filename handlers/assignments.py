from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
import uuid

from states.lab_states import AssignmentStates
from keyboards.lab_menu import (
    get_assignment_type_kb,
    get_assignments_menu_kb,
    get_assignment_actions_kb
)
from utils.models import Assignment

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
assignments = {}

@router.message(Command("assignments"))
async def show_assignments_menu(message: Message):
    await message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:",
        reply_markup=get_assignments_menu_kb()
    )

@router.callback_query(F.data == "assignment:add")
async def start_assignment_adding(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_assignment_type_kb()
    )
    await state.set_state(AssignmentStates.choosing_type)

@router.callback_query(StateFilter(AssignmentStates.choosing_type))
async def process_assignment_type(callback: CallbackQuery, state: FSMContext):
    assignment_type = callback.data.split(":")[1]
    await state.update_data(type=assignment_type)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=None
    )
    await state.set_state(AssignmentStates.entering_name)

@router.message(StateFilter(AssignmentStates.entering_name))
async def process_assignment_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AssignmentStates.entering_description)

@router.message(StateFilter(AssignmentStates.entering_description))
async def process_assignment_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 23:59"
    )
    await state.set_state(AssignmentStates.entering_deadline)

@router.message(StateFilter(AssignmentStates.entering_deadline))
async def process_assignment_deadline(message: Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        
        assignment = Assignment(
            id=str(uuid.uuid4()),
            type=data["type"],
            name=data["name"],
            description=data["description"],
            deadline=deadline,
            created_at=datetime.now(),
            created_by=message.from_user.id
        )
        
        assignments[assignment.id] = assignment
        
        await message.answer(
            f"–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–¢–∏–ø: {'–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞' if assignment.type == 'lab' else '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {assignment.name}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {assignment.deadline.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_assignments_menu_kb()
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 23:59"
        )

@router.callback_query(F.data == "assignment:list")
async def list_assignments(callback: CallbackQuery):
    if not assignments:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!",
            reply_markup=get_assignments_menu_kb()
        )
        return

    text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
    for assignment in assignments.values():
        text += (
            f"{'üî¨ –õ–∞–±–∞' if assignment.type == 'lab' else 'üìö –î–ó'}: {assignment.name}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {assignment.deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {assignment.description}\n\n"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_assignments_menu_kb()
    )

@router.callback_query(F.data == "assignment:deadlines")
async def show_deadlines(callback: CallbackQuery):
    now = datetime.now()
    active_assignments = {
        k: v for k, v in assignments.items()
        if v.deadline > now
    }
    
    if not active_assignments:
        await callback.message.edit_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤!",
            reply_markup=get_assignments_menu_kb()
        )
        return

    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
    for assignment in sorted(active_assignments.values(), key=lambda x: x.deadline):
        time_left = assignment.deadline - now
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        
        text += (
            f"{'üî¨ –õ–∞–±–∞' if assignment.type == 'lab' else 'üìö –î–ó'}: {assignment.name}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {assignment.deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left}–¥ {hours_left}—á\n\n"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_assignments_menu_kb()
    ) 