from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from states.task_states import TaskCreation
from database.database import Database

router = Router()
db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
def get_task_type_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", callback_data="task_type:lab"),
            InlineKeyboardButton(text="üè† –î–æ–º–∞—à–∫–∞", callback_data="task_type:homework")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="task_type:event")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
def get_subject_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="subject:programming"),
            InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="subject:informatics")
        ],
        [
            InlineKeyboardButton(text="–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="subject:discrete_math")
        ],
        [
            InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="subject:manual")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
def get_priority_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="‚ö†Ô∏è –ù–∏–∑–∫–∏–π", callback_data="priority:low"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority:medium")
        ],
        [
            InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority:high")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_task"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(lambda c: c.data == "add_task")
async def start_task_creation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=get_task_type_keyboard()
    )
    await state.set_state(TaskCreation.waiting_for_type)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
@router.callback_query(TaskCreation.waiting_for_type, F.data.startswith("task_type:"))
async def process_type(callback: types.CallbackQuery, state: FSMContext):
    task_type = callback.data.split(":")[1]
    type_names = {
        "lab": "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è",
        "homework": "üè† –î–æ–º–∞—à–∫–∞",
        "event": "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    }
    await state.update_data(task_type=type_names[task_type])
    
    if task_type in ["lab", "homework"]:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
            reply_markup=get_subject_keyboard()
        )
        await state.set_state(TaskCreation.waiting_for_subject)
    else:  # –î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        await state.update_data(subject="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
        )
        await state.set_state(TaskCreation.waiting_for_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router.callback_query(TaskCreation.waiting_for_subject, F.data.startswith("subject:"))
async def process_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split(":")[1]
    if subject == "manual":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:"
        )
        await state.set_state(TaskCreation.waiting_for_subject)
    else:
        subject_names = {
            "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "informatics": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            "discrete_math": "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        }
        await state.update_data(subject=subject_names[subject])
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
        )
        await state.set_state(TaskCreation.waiting_for_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router.message(TaskCreation.waiting_for_subject)
async def process_manual_subject(message: types.Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
    )
    await state.set_state(TaskCreation.waiting_for_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(TaskCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):"
    )
    await state.set_state(TaskCreation.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(TaskCreation.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    description = message.text if message.text != "-" else None
    await state.update_data(description=description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:"
    )
    await state.set_state(TaskCreation.waiting_for_deadline)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
@router.message(TaskCreation.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(deadline=deadline)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
            reply_markup=get_priority_keyboard()
        )
        await state.set_state(TaskCreation.waiting_for_priority)
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
@router.callback_query(TaskCreation.waiting_for_priority, F.data.startswith("priority:"))
async def process_priority(callback: types.CallbackQuery, state: FSMContext):
    priority = callback.data.split(":")[1]
    priority_names = {
        "low": "‚ö†Ô∏è –ù–∏–∑–∫–∏–π",
        "medium": "üü° –°—Ä–µ–¥–Ω–∏–π",
        "high": "üî¥ –í—ã—Å–æ–∫–∏–π"
    }
    await state.update_data(priority=priority_names[priority])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirmation_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üìã –¢–∏–ø: {data['task_type']}\n"
    )
    
    if data['task_type'] in ["üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "üè† –î–æ–º–∞—à–∫–∞"]:
        confirmation_text += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {data['subject']}\n"
    
    confirmation_text += (
        f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {data['deadline'].strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data['priority']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(TaskCreation.confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(TaskCreation.confirmation, F.data == "confirm_task")
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.add_task(
        user_id=callback.from_user.id,
        title=data['title'],
        task_type=data['task_type'],
        subject=data['subject'],
        deadline=data['deadline'],
        description=data['description'],
        priority=data['priority']
    )
    
    if success:
        await callback.message.edit_text(
            "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@router.callback_query(TaskCreation.confirmation, F.data == "cancel_task")
async def process_cancellation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    await state.clear() 