from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database

router = Router()
db = Database()

class AuthStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_group = State()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        ],
        resize_keyboard=True
    )
    return keyboard

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if await db.is_authorized(message.from_user.id):
        await message.answer(
            "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(AuthStates.waiting_for_name)

@router.message(AuthStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –§–ò–û (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–ª–æ–≤–∞)
    name_parts = message.text.split()
    if len(name_parts) != 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return
    
    await state.update_data(full_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–í–¢–±-1303-05-00):")
    await state.set_state(AuthStates.waiting_for_group)

@router.message(AuthStates.waiting_for_group)
async def process_group(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã
    if not message.text or len(message.text) < 5:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–í–¢–±-1303-05-00)")
        return
    
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    group_name = message.text
    
    await db.add_student(message.from_user.id, full_name, group_name)
    await state.clear()
    
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n"
        f"–§–ò–û: {full_name}\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@router.message(F.text == "üë§ –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_user_info(message: Message):
    student = await db.get_student(message.from_user.id)
    if not student:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    await message.answer(
        f"üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"–§–ò–û: {student.full_name}\n"
        f"–ì—Ä—É–ø–ø–∞: {student.group_name}\n"
        f"ID: {student.user_id}"
    ) 